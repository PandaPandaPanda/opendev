{"version":3,"sources":["components/logs/LogItem.js","components/layout/Preloader.js","actions/logActions.js","actions/types.js","components/logs/Logs.js","reducers/logReducer.js","reducers/index.js","store.js","App.js","index.js"],"names":["connect","_ref","log","onToggle","isOpened","author","scores","_log$message","message","content","reviewer","_log$data","data","date","type","_useState","useState","_useState2","Object","slicedToArray","messageParsed","setMessageParsed","useEffect","temp","forEach","line","react_default","a","createElement","className","style","backgroundColor","id","onClick","map","score","concat","value","name","react","dist_default","format","includes","href","Preloader","setLoading","state","getLogs","dispatch","payload","res","json","err","response","statusText","_ref$log","logs","loading","setIsOpened","_useState3","_useState4","toggleAll","setToggleAll","length","Array","fill","layout_Preloader","newArr","toConsumableArray","logs_LogItem","key","initialState","current","error","combineReducers","arguments","undefined","action","objectSpread","console","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","apply","App","es","logs_Logs","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.55f26c5b.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport Moment from \"react-moment\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst LogItem = ({ log, onToggle, isOpened }) => {\n  const {\n    author,\n    scores,\n    message: { content, reviewer },\n    data: { date, type },\n  } = log;\n  const [messageParsed, setMessageParsed] = useState(null);\n\n  useEffect(() => {\n    if (content) {\n      var temp = \"\";\n      content.forEach((line) => {\n        temp += line + \"\\n\";\n        setMessageParsed(temp);\n      });\n    }\n  }, []);\n  return (\n    <li\n      className=\"contentContainer\"\n      style={{\n        backgroundColor: isOpened\n          ? log.id % 2 === 0\n            ? \"#F9F9F9\"\n            : \"#F4F4F4\"\n          : \"white\",\n      }}\n      onClick={() => {\n        onToggle(log.id);\n      }}\n    >\n      <span className=\"author\">\n        <strong>{author}</strong>\n      </span>\n\n      <div className=\"messageContainer\">\n        {scores && (\n          <span className=\"scoresContainer\">\n            {scores.map((score) => {\n              return (\n                <span\n                  className={\n                    \"badge \" + `badge-${score.value > 0 ? score.value : null}`\n                  }\n                >\n                  {score.name +\n                    \" \" +\n                    (score.value > 0 ? \"+\" + score.value : \"\")}\n                </span>\n              );\n            })}\n          </span>\n        )}\n        {!isOpened && content && (\n          <Fragment>\n            <span>{messageParsed}</span>\n            {reviewer && (\n              <span className=\"badge badge-reviewer\">{reviewer}</span>\n            )}\n          </Fragment>\n        )}\n      </div>\n\n      <span className=\"dataContainer\">\n        {type && <span className=\"type\">{type}</span>}\n        <span>\n          <Moment format=\"MMM DD HH:mm\">{date}</Moment>\n        </span>\n        <div className={`icon ${isOpened ? \"icon-flip\" : \"\"}`}></div>\n      </span>\n\n      {isOpened && (\n        <div className=\"messageContainer-expanded\">\n          {content && messageParsed.includes(\"http\")\n            ? content.map((line) => {\n                return line.includes(\"http\") ? (\n                  <a href={line}>{line}</a>\n                ) : (\n                  <p>{line}</p>\n                );\n              })\n            : content.map((line) => {\n                return <span>{line}</span>;\n              })}\n          {reviewer && <span className=\"badge badge-reviewer\">{reviewer}</span>}\n        </div>\n      )}\n    </li>\n  );\n};\n\nLogItem.propTypes = {\n  log: PropTypes.object.isRequired,\n};\n\nexport default connect(null, {})(LogItem);\n","import React from \"react\";\nimport \"./index.css\";\n\nconst Preloader = () => {\n  return (\n    <div className=\"\">\n      <div className=\"loader__element\" />\n    </div>\n  );\n};\n\nexport default Preloader;\n","import { GET_LOGS, SET_LOADING, LOGS_ERROR } from \"./types\";\nimport res from \"../db.json\";\n\n// export const getLogs = () => {\n//   return async dispatch => {\n//     setLoading();\n\n//     const res = await fetch('/logs');\n//     const data = await res.json();\n\n//     dispatch({\n//       type: GET_LOGS,\n//       payload: data\n//     });\n//   };\n// };\n\n// Get logs from server\nexport const getLogs = () => (dispatch) => {\n  try {\n    setLoading();\n\n    const data = res.json();\n    dispatch({\n      type: GET_LOGS,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n// Set loading to true\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING,\n  };\n};\n","export const GET_LOGS = \"GET_LOGS\";\nexport const LOGS_ERROR = \"LOGS_ERROR\";\nexport const SET_LOADING = \"SET_LOADING\";\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport LogItem from \"./LogItem\";\nimport Preloader from \"../layout/Preloader\";\nimport PropTypes from \"prop-types\";\nimport { getLogs } from \"../../actions/logActions\";\nimport \"./index.css\";\n\nconst Logs = ({ log: { logs, loading }, getLogs }) => {\n  const [isOpened, setIsOpened] = useState([]);\n  const [toggleAll, setToggleAll] = useState(false);\n\n  useEffect(() => {\n    getLogs();\n  }, []);\n\n  useEffect(() => {\n    if (isOpened.length === 0 && logs) {\n      setIsOpened(new Array(logs.length).fill(false));\n    }\n  }, [logs]);\n\n  if (loading || logs === null) {\n    return <Preloader />;\n  }\n\n  const onToggle = (id) => {\n    let newArr = [...isOpened]; // copying the old datas array\n    newArr[id] = !newArr[id]; // replace e.target.value with whatever you want to change it to\n    setIsOpened(newArr);\n  };\n\n  return (\n    <ul className=\"collection\">\n      <li className=\"header\">\n        <button\n          onClick={() => {\n            setIsOpened(new Array(isOpened.length).fill(!toggleAll));\n            setToggleAll(!toggleAll);\n          }}\n        >\n          {toggleAll ? \"COLLAPSE ALL\" : \"EXPAND ALL\"}\n        </button>\n      </li>\n      {!loading && logs.length === 0 ? (\n        <p className=\"center\">No logs to show...</p>\n      ) : (\n        logs.map((log) => {\n          return (\n            <LogItem\n              log={log}\n              key={log.id}\n              isOpened={isOpened[log.id]}\n              onToggle={onToggle}\n            />\n          );\n        })\n      )}\n    </ul>\n  );\n};\n\nLogs.propTypes = {\n  log: PropTypes.object.isRequired,\n  getLogs: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  log: state.log,\n});\n\nexport default connect(mapStateToProps, { getLogs })(Logs);\n","import { GET_LOGS, SET_LOADING, LOGS_ERROR } from \"../actions/types\";\n\nconst initialState = {\n  logs: null,\n  current: null,\n  loading: false,\n  error: null,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_LOGS:\n      return {\n        ...state,\n        logs: action.payload,\n        loading: false,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case LOGS_ERROR:\n      console.error(action.payload);\n      return {\n        ...state,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport logReducer from \"./logReducer\";\n\nexport default combineReducers({\n  log: logReducer,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React, { Fragment } from \"react\";\nimport Logs from \"./components/logs/Logs\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Fragment>\n        <div className=\"container\">\n          <Logs />\n        </div>\n      </Fragment>\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}